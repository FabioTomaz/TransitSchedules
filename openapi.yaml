openapi: 3.0.1
info:
  title: Transportation Schedules
  description: 'Api for managing schedules from transportation services. Supports the General Transit Feed Specification (GTFS) format. You can find out more about GTFS at [GTFS Official Website](http://swagger.io). For
    this sample, you can use the api key `special-key` to test the authorization     filters.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: fmts@ua.pt
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://petstore.swagger.io/v2
- url: http://petstore.swagger.io/v2
tags:
- name: transit GTFS
  description: Everything related to GTFS 
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: static
  description: Static GTFS
  externalDocs:
    description: Find more about static GTFS
    url: https://developers.google.com/transit/gtfs
- name: realtime
  description: Realtime GTFS
  externalDocs:
    description: Find more about realtime GTFS
    url: http://swagger.io
paths:
  /gtfs/static/{gtfsId}:
    get:
      tags:
      - static
      summary: Find gtfs by ID
      description: Returns a single GTFS
      operationId: getPetById
      parameters:
      - name: gtfsId
        in: path
        description: ID of gtfs to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/GTFS'
            application/json:
              schema:
                $ref: '#/components/schemas/GTFS'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Pet not found
          content: {}
      security:
      - api_key: []
    delete:
      tags:
      - static
      summary: Deletes a gtfs
      operationId: deletePet
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: petId
        in: path
        description: Pet id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Pet not found
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets 
  /gtfs/static:
    get:
      tags:
      - static
      summary: Returns all static GTFS's
      operationId: getInventory
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
      - api_key: []
      /schedule:
    post:
      tags:
      - static
      summary: Uploud new gtfs
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Schedule'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
  /schedule:
    post:
      tags:
      - schedule
      summary: Create new schedule
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Schedule'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
  /schedule/{scheduleId}:
    get:
      tags:
      - schedule
      summary: Get user by schedule id
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Schedule'
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - schedule
      summary: Update schedule
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
    delete:
      tags:
      - schedule
      summary: Delete schedule
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
components:
  schemas:
    Schedule:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        owner_id:
          type: string
        timezone:
          type: string
        intervals:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        freq_type:
          type: integer
        version_number:
          type: integer
      xml:
        name: User
    Interval:
      type: object
      properties:
        start: 
          type: string
        end:
          type: string
        repeat:
          type: boolean
        tags:
          type: string
        
    GTFS:
      required:
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: doggie
      xml:
        name: Pet
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
